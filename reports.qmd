---
title: "All about reports"
author: "Posit Solutions Engineering (Lisa Anders)"
institute: "Posit, PBC"
format:
  revealjs:
    multiplex: true
    theme: default
    logo: images/posit-logo-black-TM.png
    footer: <http://solutions.rstudio.com/>
    slide-number: true
    preview-links: auto
editor: source
---

### Why you should be using profvis {.smaller}

-   You want to know what to prioritize to improve your application
-   Often what's holding your application back isn't intuitive

<center>

![](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/data_cowboy.png){width="50%"}

::: {.citation style="font-size: 16px"}
"Illustration from Hadley Wickham's talk"The Joy of Functional Programming (for Data Science)." by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::

</center>

::: notes
-   Investigate server performance issues
-   Profiling (and load testing)
-   Runtime settings
-   Improve data handling (cacheing, storage)
-   Consider async
:::

## Profiling {auto-animate="true"}

<font size="6">

Profile apps to understand where it is spending the bulk of its time. Oftentimes the result is surprising and may point at the issue being a specific function or command rather than needing an overhaul of the app itself or changing how it is running on the server.

::: {layout="[2, 20]"}
![](https://support.posit.co/hc/en-us/article_attachments/206191538/Screen_Shot_2016-04-04_at_2.09.15_PM.png){width="70"}

**profvis** - Profvis is a tool for helping you to understand how R spends its time.
:::

``` r
library(profvis)

# general code example
profvis({
  data(diamonds, package = "ggplot2")
  
  plot(price ~ carat, data = diamonds)
  m <- lm(price ~ carat, data = diamonds)
  abline(m, col = "red")
})

# shiny app example
profvis({runApp()})
```

::: footer
Learn more: [profvis](https://rstudio.github.io/profvis/index.html)
:::

</font>

## Profiling

<font size="6">

<center>

![](https://support.posit.co/hc/en-us/article_attachments/206191538/Screen_Shot_2016-04-04_at_2.09.15_PM.png){width="70%"}

::: {.citation style="font-size: 16px"}
For more information refer to [the support article](https://rstudio.github.io/profvis/index.html)
:::

</center>

</font>

::: notes
On top is the code, and on the bottom is a flame graph. In the flame graph, the horizontal direction represents time in milliseconds, and the vertical direction represents the call stack. Looking at the bottom-most items on the stack, most of the time, about 2 seconds, is spent in plot, and then a much smaller amount of time is spent in lm, and almost no time at all is spent in abline -- it doesn't even show up on the flame graph.

Each block in the flame graph represents a call to a function, or possibly multiple calls to the same function. The width of the block is proportional to the amount of time spent in that function. When a function calls another function, another block is added on top of it in the flame graph.

The profiling data has some limitations: some internal R functions don't show up in the flame graph, and it offers no insight into code that's implemented in languages other than R (e.g. C, C++, or Fortran).
:::

## Load testing {auto-animate="true"}

<font size="6">

Using [load testing](https://docs.rstudio.com/connect/user/shiny/#load-testing) with profiling grants a very granular view of where the performance issues are happening. Oftenlower usage apps may appear to have great performance, only to struggle as more users access that piece of content due to multiple users sharing the same R or Python process.

::: {layout="[2, 20]"}
![](https://rstudio.github.io/shinyloadtest/reference/figures/slt_report_screenshot.png){width="70"}

**shinyloadtest** - Load testing helps developers and administrators estimate how many users their application can support.
:::

::: footer
Learn more: [shinyloadtest](https://rstudio.github.io/shinyloadtest/articles/load-testing-authenticated-apps.html)
:::

</font>

::: notes
The steps:

-   Record a typical user session for the app.
-   Replay the session in parallel, simulating many simultaneous users accessing the app.
-   Analyze the results of the load test and determine if the app performed well enough.
:::

## Load testing {auto-animate="true"}

<font size="5">

::: {layout="[2, 20]"}
![](https://rstudio.github.io/shinyloadtest/reference/figures/slt_report_screenshot.png){width="70"}

**shinyloadtest** - Load testing helps developers and administrators estimate how many users their application can support.
:::

The steps:

-   Record a typical user session for the app.

``` r
shinyloadtest::record_session('https://shinyapp.example.com/')
```

-   Replay the session in parallel, simulating many simultaneous users accessing the app.

``` r
shinycannon recording.log https://shinyapp.example.com/ --workers 5 --loaded-duration-minutes 2 --output-dir run1
```

-   Analyze the results of the load test and determine if the app performed well enough.

``` r
df <- shinyloadtest::load_runs("run1")
shinyloadtest::shinyloadtest_report(df, "run1.html")
```

::: footer
Learn more: [shinyloadtest](https://rstudio.github.io/shinyloadtest/articles/load-testing-authenticated-apps.html)
:::

</font>

## Load testing {auto-animate="true"}

<font size="6">

::: {layout="[2, 20]"}
![](https://rstudio.github.io/shinyloadtest/reference/figures/slt_report_screenshot.png){width="70"}

**shinyloadtest** - Load testing helps developers and administrators estimate how many users their application can support.
:::

<center>

![](https://rstudio.github.io/shinyloadtest/reference/figures/slt_report_screenshot.png){width="70%"}

::: {.citation style="font-size: 16px"}
For more information refer to [shinyloadtest](https://rstudio.github.io/shinyloadtest/articles/load-testing-authenticated-apps.html)
:::

</center>

</font>

## What about Python?

-   Python profiling tool: <https://jiffyclub.github.io/snakeviz/>
-   Python load testing tool: <https://locust.io/>

## Where to go from here?

-   [Shiny in Production by Kelly O'Briant](https://kellobri.github.io/shiny-prod-book/scaling.html)
-   [Cran whales](https://rstudio.github.io/promises/articles/casestudy.html)
-   [Cran whales talk](https://www.youtube.com/watch?v=Wy3TY0gOmJw)
-   [Cran whales article](https://cran.r-project.org/web/packages/promises/vignettes/casestudy.html)
-   [Profiling in RStudio](https://support.posit.co/hc/en-us/articles/218221837-Profiling-with-RStudio)

# Optional/Backup {.smaller}

# Data best practices {.smaller}

Apply data best practices and see if that improves performance:

-   Pull data on a scheduler
-   Reducing the data being loaded
-   Selecting a faster data storage system, for example by [pinning arrow files](https://pins.rstudio.com/articles/pins.html?q=arrow#reading-and-writing-data)
-   Utilize [cacheing](https://docs.rstudio.com/connect/user/shiny/#caching)

# Async {.smaller}

As a last resort we can consider async.

In general, async is only useful when there are specific steps that take a long time to run, since that will free up the process to service other users. Usually async is saved as a last resort because it is usually the most challenging to implement.

-   [Improving scalability with async programming in R](https://shiny.rstudio.com/articles/async.html)
-   [Improving scalability with async programming in Python](https://shiny.rstudio.com/articles/async.html)

When using async, encouraging developers to include additional debug messages, for example with [log4r in R](https://github.com/johnmyleswhite/log4r), is particularly important. This will allow developers to trace back errors to the session and connection.

## When to know it's a real server issue {.smaller}

Ask the questions:

-   Are all applications impacted?
-   Has performance gotten worse over time?

Use the tools:

-   Admin dashboard
-   Logs
-   Scheduled content timetable
-   Any additional monitoring through Prometheus/Graphite/etc.
-   Reclaim space by [reducing the number of bundles stored on the server](https://docs.rstudio.com/connect/admin/content-management/#bundle-management)

::: notes
:::
